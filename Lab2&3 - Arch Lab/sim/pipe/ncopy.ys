#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Antoine Carossio antoine.carossio
#
# Describe how and why you modified the baseline code.
# • Implemented iaddq (same as seq-full)
# • Reordered instructions to avoid bubbles
# • Unrolled the loop 6 times
# • Handle the case when len<6 with final operations
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
    # Loop header
    iaddq  $-6, %rdx        # len -= 6
    jl     Final            # If len < 0, execute final operations (we are at the end of scr)

Loop:
    mrmovq (%rdi), %r8      # read val from src[i]
    mrmovq 8(%rdi), %r9     # read val from src[i+1]
    mrmovq 16(%rdi), %r10   # read val from src[i+2]
    mrmovq 24(%rdi), %r11   # read val from src[i+3]
    mrmovq 32(%rdi), %r12   # read val from src[i+4]
    mrmovq 40(%rdi), %r13   # read val from src[i+5]

Npos0:
    rmmovq %r8, (%rsi)      # src[i] to dst[i]
    andq   %r8, %r8         # src[i] <= 0?
    jle    Npos1            # if so, goto Npos1:
    iaddq  $1, %rax         # count++

Npos1:
    rmmovq %r9, 8(%rsi)     # src[i+1] to dst[i+1]
    andq   %r9, %r9         # is src[i+1] <= 0?
    jle    Npos2            # if so, go to Npos2
    iaddq  $1, %rax         # count++

Npos2: 
    rmmovq %r10, 16(%rsi)   # src[i+2] to dst[i+2]
    andq   %r10, %r10       # is src[i+2] <= 0? 
    jle    Npos3            # if so, go to Npos3
    iaddq  $1, %rax         # count++

Npos3: 
    rmmovq %r11, 24(%rsi)   # src[i+3] to dst[i+3]
    andq   %r11, %r11       # src[i+3] <= 0? 
    jle    Npos4            # if so, go to Npos4
    iaddq  $1, %rax         # count++ 
    
Npos4: 
    rmmovq %r12, 32(%rsi)   # src[i+4] to dst[i+4]
    andq   %r12, %r12       # is src[i+4] <= 0?
    jle    Npos5            # if so, go to Npos5
    iaddq  $1, %rax         # count++

Npos5: 
    rmmovq %r13, 40(%rsi)   # src[i+5] to dst[i+5]
    andq   %r13, %r13       # is src[i+5] <= 0?
    jle    Unroller         # if so, go to Npos6
    iaddq  $1, %rax         # count++

Unroller: 
    iaddq $48, %rdi         # start unrolling src at [i+6]
    iaddq $48, %rsi         # start unrolling dst at [i+6]
    iaddq $-6, %rdx         # len-=6
    jge   Loop              # If len>0, go back to the Loop

Final:
    iaddq $6, %rdx          # put len back to its original value

Final0:
    iaddq  $-1, %rdx        # len--
    jl     Done             # if len < 0, go to Done
    mrmovq (%rdi), %r9      # read val from src[i]
    mrmovq 8(%rdi), %r10    # read val from src[i+1]
    rmmovq %r9, (%rsi)      # src[i] to dst[i]
    andq   %r9, %r9         # is src [i] <= 0?
    jle    Final1           # if so, go to Final1
    iaddq  $1, %rax         # count++
    
Final1: 
    iaddq  $-1, %rdx        # len-- 
    jl     Done             # if len < 0, go to Done
    rmmovq %r10, 8(%rsi)    # src [i+1] to dst[i+1]
    andq   %r10, %r10       # is src [i+1] <= 0?
    jle    Final2           # if so, go to Final2
    iaddq  $1, %rax         # count++ 

Final2: 
    iaddq  $-1, %rdx        # len-- 
    jl     Done             # if len < 0, go to Done
    mrmovq 16(%rdi), %r9    # read val from src[i+2]
    mrmovq 24(%rdi), %r10   # read val from src[i+3]
    rmmovq %r9, 16(%rsi)    # src[i+2] to dst[i+2] 
    andq   %r9, %r9         # src[i+2] <= 0? 
    jle    Final3           # if so, go to Final3
    iaddq  $1, %rax         # count++

Final3: 
    iaddq  $-1, %rdx        # len--
    jl     Done             # if len < 0, go to Done
    rmmovq %r10, 24(%rsi)   # src[i+3] to dst[i+3]
    andq   %r10, %r10       # src[i+3] <= 0? 
    jle    Final4           # if so, go to Final4 
    iaddq  $1, %rax 

Final4: 
    iaddq  $-1, %rdx        # len--
    jl     Done             # if len < 0, go to Done
    mrmovq 32(%rdi), %r9    # read val from src[i+4]
    rmmovq %r9, 32(%rsi)    # src[i+4] to dst[i+4]
    andq   %r9, %r9         # src[i+4] <= 0? 
    jle    Done             # if so, go to Final5
    iaddq  $1, %rax         # count++

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
    ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
